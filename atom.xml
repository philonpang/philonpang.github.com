<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[philon的博客]]></title>
  <link href="http://ios.devphilon.com/atom.xml" rel="self"/>
  <link href="http://ios.devphilon.com/"/>
  <updated>2015-06-05T19:33:57+08:00</updated>
  <id>http://ios.devphilon.com/</id>
  <author>
    <name><![CDATA[philon]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[基于ReactiveCocoa的MVVM探索]]></title>
    <link href="http://ios.devphilon.com/blog/2015/06/04/reactivecocoa-mvvm/"/>
    <updated>2015-06-04T15:49:37+08:00</updated>
    <id>http://ios.devphilon.com/blog/2015/06/04/reactivecocoa-mvvm</id>
    <content type="html"><![CDATA[<h2>前言</h2>

<p>一直觉得对于具体功能模块的设计模式来说，没有什么值得研究和讨论的。觉得iOS提供的MVC模式已经能够很好的利用到产品的开发中去，对于大多数开发人员来说，最熟悉最得心应手的设计模式莫过于此。</p>

<p>但是随着业务需求的膨涨、页面交互的体验优化、业务模式的逐渐丰富，我们一直习以为常的MVC模式中，某些Controller的UI交互代码＋业务逻辑代码已经达到上千行的规模。当我们维护app、或进行新功能的扩充、或提供其他模块的调用接口时，复杂混乱的controller逻辑让我们头疼不已。</p>

<p>于是我们开始将Controlller的业务逻辑代码进行拆分，拆分部分逐渐形成了viewModel层，于是在现下移动客户端领域开始兴起了MVVM模式(V-VM-M)。随着FaceBook的“<a href="https://github.com/facebook/react-native">React Native</a>“跨平台开发框架，以及之前就出现的<a href="https://github.com/ReactiveCocoa/ReactiveCocoa">ReactiveCocoa</a>响应式编程模式的推出，MVVM设计模式在IOS移动端正逐渐被得心应手的开始使用。</p>

<p>本文在在学习了解React Native和ReactiveCocoa的基础上，对在IOS开发框架中如何采用MVVM模式进行了一定的探索和实践，并在实际的工程项目中如何利用MVC和MVVM做混合模式开发给出一定的建议，部分内容可能偏理论一点，不妥之处，望指教更正。</p>

<p>关于ReactiveCocoa和MVVM的学习资料：<a href="https://www.google.com/stars/mzm33xlrlwxgw/profile/folio/ssf_68299747347db8bc?hl=zh-CN">点击这里-Chrome书签</a></p>

<p>通过学习资料了解完ReactiveCocoa的基本概念之后，我们可以从下面一张图对ReactiveCocoa有一个整体理解：
<img src="http://ios.devphilon.com/images/FRP_ReactiveCocoa_large.png"></p>

<p>核心概念是RACSignal，相当于一个信号管道，接收信号源的信号，将信号依次发送给订阅者，在RACSignal基础上我们在MVVM模式下用得比较多的是RACCommand，信号到来开始执行，每次执行产生一个回调Signal。 具体的理解可以参考学习资料，讲的很清楚。</p>

<p>目前最新版本的ReactiveCocoa开始支持Swift，要求最低发布版本为IOS8，所以我们可以使用支持IOS6的最高版本， 当接入ReactiveCocoa之后，在性能上会慢1～2倍，但不影响app的直接体验，另外在调试部分也需要程序员看懂信号的来源和出处，打断点进行调试。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>platform :ios, '6.0'
</span><span class='line'>inhibit_all_warnings!
</span><span class='line'>
</span><span class='line'>workspace 'WTestReactiveCocoa'
</span><span class='line'>xcodeproj 'TestReactiveCocoa'
</span><span class='line'>
</span><span class='line'>target :TestReactiveCocoa do
</span><span class='line'>    pod 'ReactiveCocoa', '~&gt; 2.5'
</span><span class='line'>
</span><span class='line'>    #设置pod target需要link的工程target
</span><span class='line'>    link_with 'TestReactiveCocoa'
</span><span class='line'>end
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p>本文主要介绍通过ReactiveCocoa进行MVVM模式的开发实践，具体的应用模式如下：</p>

<p><img src="http://ios.devphilon.com/images/MVVMReactiveCocoa.png"></p>

<h2>一、关于view层和viewModel层的Binding</h2>

<p>对于某个业务功能（这里指某个controller），从代码集来看，肯定是一堆系统原生view组件和自定义view组件在controller.view中的聚集。所有的叶子view组件节点都是以controller.view为根节点，作为其subview存在于controller中。所以view层其实可以看作是以controller.view为根节点的树状结构，负责view的创建、布局、和viewModel的binding、以及页面的交互效果（包括动画、跳转、切换等），只涉及到页面交互处理，不涉及业务逻辑的处理。</p>

<p>而对于viewModel来说，一般和controller是一一对应的，view层可以强依赖viewModel层，而viewModel层一定不能引用view层的任何对象。 view层中涉及业务逻辑处理的任何交互均需要通过signal信号告知viewModel层或者直接调用viewModel的command命令执行，同时view层也可以监听viewModel中定义的signal或者command执行发出的signal完成页面交互逻辑的处理。</p>

<h3>具体处理过程</h3>

<p>在controller初始化时，为该controller初始化一个对应的viewModel对象。这个viewModel可以只是个壳，viewModel中的具体属性对象可以通过前一个controller赋值初始化，也可以在当前controller中发出某个signal之后通过Model层提供的service进行初始化。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- (instancetype)init
</span><span class='line'>{
</span><span class='line'>    if (self = [super init]) {
</span><span class='line'>        _fhcViewModel = [CPArenaFootHallContainerViewModel new];
</span><span class='line'>        [self setupContent];
</span><span class='line'>    }
</span><span class='line'>    return self;
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<p>完成初始化之后，需要在viewDidLoad方法中在view组件创建之后，完成view层和viewModel层的binding。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- (void)viewDidLoad
</span><span class='line'>{
</span><span class='line'>    [super viewDidLoad];
</span><span class='line'>    [self setupContent];
</span><span class='line'>    [self bindViewModel];
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>/**
</span><span class='line'> * 将controller中的view和ViewModel进行binding
</span><span class='line'> */
</span><span class='line'>-(void) bindViewModel{
</span><span class='line'>    //监控初始化hallModel command的执行
</span><span class='line'>    @weakify(self);
</span><span class='line'>    [[self.fhcViewModel.loadHallModel execute:@(YES)] subscribeNext:^(id statusCode){
</span><span class='line'>      //to do something
</span><span class='line'>    }];
</span><span class='line'> }
</span></code></pre></td></tr></table></div></figure>




<blockquote><p>tip: </p><p>(1) 并不是所有的view组件都需要和viewModel绑定，通常如果view组件的显示属性是常量定义（如显示标题、某个业务组件的icon图片名称), 这些属性没有必要放入viewModel层，也就没有必要进行binding。</p><p>(2) 对于controller中跟viewModel中的对象息息相关的各个view对象（获取textField的输入值作为viewModel中某个operation的输入，点击某个按钮执行viewModel的某个command）, 则需要在controller中进行绑定。</p></blockquote>


<p>不同的情景其binding的方法也不一样：</p>

<ul>
<li>情景1:</li>
</ul>


<p>如果subview是UIkit自带的view组件（如label，button, textfield, textview, imageView, alert, action sheet等等），则可以直接通过ReactiveCocoa直接进行view和viewModel之间的绑定。</p>

<p>ReactiveCocoa提供绑定category的的基本View组件包括：MKAnnotationView、UIActionSheet、UIAlertView、UIBarButtonItem、UIButton、UICollectionReusableView、UIControl、UIDatePicker、UIGestureRecognizer、UIImagePickerController、UIRefreshControl、UISegmentedControl、UISlider、UIStepper、UISwitch、UITableViewCell、UITableViewHeaderFooterView、UITextField、UITextView。</p>

<p>而我们平常经常用到的可能会有UITextField，UITextView、UIControl、UIButton、UIActionSheet、UIAlertView这几个，具体的使用方法在ReativeCoccoa的<a href="http://www.itiger.me/?p=38">示例</a>中可以查看。其封装核心是监控view组件的delegate方法或者selector方法执行，每当执行时发送一个执行信号；view层将该信号和viewModel层进行绑定，自己也可以监控这些信号完成某些交互行为。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- (void)bindViewModel {
</span><span class='line'>    self.title = self.viewModel.title;
</span><span class='line'>    RAC(self.viewModel, searchText) = self.searchTextField.rac_textSignal;
</span><span class='line'>    self.searchButton.rac_command = self.viewModel.executeSearch;
</span><span class='line'>    RAC([UIApplication sharedApplication], networkActivityIndicatorVisible) = self.viewModel.executeSearch.executing;
</span><span class='line'>    RAC(self.loadingIndicator, hidden) = [self.viewModel.executeSearch.executing not];
</span><span class='line'>    
</span><span class='line'>    [self.viewModel.executeSearch.executionSignals
</span><span class='line'>     subscribeNext:^(id x) {
</span><span class='line'>         [self.searchTextField resignFirstResponder];
</span><span class='line'>     }];
</span><span class='line'>}
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>情景2:</li>
</ul>


<p>情景2主要是针对subview是通过单独文件封装的view组件，如UITableView的自定义tableviewCell，某些在基础view组件上进行封装的view组件等。如果是新写这些view组件，可以考虑通过ReactiveCocoa的方式完成；如果是已经成型的组件，则需要根据具体情况看是否改造成响应式模式；</p>

<p>（1）如果组件中只绑定一两个viewModel中非集合类型的属性值，则直接通过开放view组件的属性值，在controller中完成binding； 具体的binding方法和情景1类似。</p>

<p>（2）如果组件中有较多的基础view组件，且都和viewModel相关，则考虑为该view组件定义一个view对象，并作为view组件的属性。controller将view组件的viewModel属性和controller对应的viewModel相应属性绑定，当controller中对应的viewModel发生变化，将会把变化传递给view 组件，在view组件中根据viewModel的属性变化去改变具体的基础view组件显示值；</p>

<p><strong><em>这个跟Reative Native的props属性传递的思想类似：对于一些component，通过属性传入，在componnet中可以通过这些props去对基础UI组件赋值，当传入属性值改变之后，对应component的相应UI组件的显示值也会发生变化。</em></strong></p>

<p>在引入ReactiveCocoa之前，view组件和viewModel的对应如下所示：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- (void)setContent:(CPArenaMatchViewModel *)content
</span><span class='line'>{
</span><span class='line'>    if ([content.sps count] != 3 || [content.supportRates count] != 3) {
</span><span class='line'>        return;
</span><span class='line'>    }
</span><span class='line'>    
</span><span class='line'>    [self.winButton setHeaderText:content.teamAName];
</span><span class='line'>    [self.winButton setDetailText:[NSString stringWithFormat:@"胜 %@",content.sps[0]]];
</span><span class='line'>    [self.drawButton setHeaderText:@"平"];
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<p>在引入ReactiveCocoa之后，具体viewModel和view组件的binding过程则根情景1种的binding类似。</p>

<ul>
<li>情景3:</li>
</ul>


<p>对于比较复杂的系统view，如tableView、colletionView、pageView等，目前ReactiveCocoa中没有提供category进行绑定。</p>

<p>个人觉得对tableview整体进行封装没有必要，一方面对于app来说，大多数复杂的界面都是在tableview的基础上定制完成的，定制越多，封装就越没有意义；另外这些复杂的系统view组件一般提供了很好的扩展性和自刷新机制（ReloadData），如tableview的section、header view、footer view、tableviewcell等，这些扩展性就对应了情景2种提到的第二种情况。</p>

<p>对于这种情景的处理方法：我们可以通过传入一个viewModel对象给自定义的view或者cell，当页面刷新的时候，可以根据监控到的传入viewModel变化刷新界面；即使是非定制的view，则可以对view的属性直接通过controller对应的viewModel直接赋值；</p>

<p>截取了tableView:cellForRowAtIndexPath的绑定代码：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>    if ([moduleKey isEqualToString:kArenaHallDaily]) {
</span><span class='line'>        
</span><span class='line'>        static NSString *dailyIdentifier = @"dailyCell";
</span><span class='line'>        CPArenaHallDailyCell *cell = [tableView dequeueReusableCellWithIdentifier:dailyIdentifier];
</span><span class='line'>        if (cell == nil) {
</span><span class='line'>          ...
</span><span class='line'>        }
</span><span class='line'>        
</span><span class='line'>        //直接读取viewModel中的值进行view组件的赋值，当tableview reload的时候，重新读取一次
</span><span class='line'>        [cell setContent:[self.fhViewModel.hallModel arenaHallDailyContent]];
</span><span class='line'>        return cell;
</span><span class='line'>        
</span><span class='line'>    } 
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>情景4:</li>
</ul>


<p>而某些container-controller（tabController和NavigationController除外），在两个或者多个controller之间切换，controller.view中基本没有交互，交互主要在navigationBar上。NavigationBar的交互主要是controller跳转和切换，可能需要从Model中获取一些数据进行判定。</p>

<p>对于这种情景，我觉得没有必要通过MVVM模式进行处理，直接按照MVC模式处理即可，Model的获取通过Model层提供的APIService获取（单例），其跳转或者切换的controller中可以直接通过APIService获取之前已经初始化的Model对象；</p>

<h3>tip</h3>

<blockquote><p>(1) 关于view的常量定义仍然属于View层，没有必要将其放进viewModel中（viewModel还只是保存view需要跟Model打交道，对其进行加工的部分）；</p><p>(2) 在view层，对于无交互且无数据刷新需求的view组件不进行绑定； 对于有交互的view组件，如果交互不会对viewModel进行改变，也无需绑定；对于一些需要等待viewModel初始化完成才能进行数据显示的view组件，则可以考虑统一监控viewModel，当viewModel有更新的时候统一刷新各个view组件；</p><p>(3) 一个controller拥有一个viewModel， 比较复杂的view组件也可以拥有一个viewModel，但其viewModel的初始化在controller的viewModel中完成；</p></blockquote>


<h2>关于controller的简化和跳转</h2>

<p>引入ReactiveCocoa有两个目的：</p>

<p>第一个:是在controller中一些交互比较频繁、状态逻辑较复杂的情况，可以通过ReactiveCocoa的Signal机制监听view组件的状态变化简化状态逻辑的判定。 比如说ReactiveCocoa的官方经典案例：用户名密码登录框；</p>

<p>第二个目的就是本文主要阐述的方向，通过引入ReactiveCocoa简化controller， 将controller中的交互逻辑和业务逻辑分开，形成有效的MVVM开发模式。在将MVVM模式应用的具体的业务组件工程中可能会引出下面一些问题：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>1. controller之间的跳转到底应该放在view层还是viewModel层？
</span><span class='line'>2. 什么代码可以从controller中分离，如何分离？
</span></code></pre></td></tr></table></div></figure>


<h3>Controller间的跳转</h3>

<p>在传统MVC模式下的controller跳转，需要在当前controller中import另外一个controller头文件，然后传入参数初始化controller，再调用navigation-push 或者 viewController-present， 相当于controller跳转是放到了view层。传统的MVC模式给我们带来的痛苦是无法对controller层进行单元测试，并且controlle中业务逻辑和交互逻辑混乱不堪，所以我们才希望通过MVVC模式来简化controller中的代码；</p>

<p>当我们将业务逻辑拆分到viewModel中，那么controller的跳转是继续留在view层还是将其拆分到viewModel层呢？我们来看一下分别放在两个层的优缺点：</p>

<ol>
<li><p>如果继续放在view层：MVVM模式号称的去UI的测试也就无法去验证跳转逻辑，无法做完整性测试；并且每个controller的viewModel是孤立的，只能对其做单元测试；</p></li>
<li><p>如果直接拆分放到viewModel层，它就背离了我们之前的分层标准，viewModel层绝对不能依赖view层的任何对象；如果我们通过viewModel层提供的service去做跳转，在MVC模式和MVVM模式混合开发的工程中，则稍显复杂</p></li>
</ol>


<p>所以本文觉得还是把controller的跳转继续放在view层；相当于通过view层的navigator去完成跳转，其实这跟React Native的跳转也是不谋而合的（在react Native中，每一个controller都被当作是navigator下的一个scene，每个scene跳转的时候都会保留对全局navigator的引用，直接在view层的代码中调用navigator.push完成）。另外controller的跳转对于整个app来说，也是属于view交互的定性。</p>

<h3>交互逻辑和业务逻辑如何分离？</h3>

<p>前文提到MVVM模式的主要工作就是将controller中的业务逻辑拆分出来，那在一个controller中如何定义业务逻辑，具体哪些代码需要拆分到viewModel中呢？前文也提到view层的主要工作是完成view的创建、布局、动画，以及交互和跳转处理。</p>

<p>view组件创建过程中，一些属性值需要在创建时通过参数传入，如果这些属性值是通过常量（如标题、按钮文字、alert提示文字、按钮的图片名称等），则不需要放到viewModel中；如果属性值是需要从Model中获取的数据（有些时候需要加工处理）进行初始化，则需要将其通过viewModel提供，一开始可以先传入一个空的viewModel，并建立view属性和viewModel的binding，当viewModel初始化完成或者更新的时候，通过signal更新view组件。另外在创建、布局view的时候可能需要一些model属性的判定，这些判断逻辑直接通过引用viewModel的数值即可。view层除开viewModel的绑定之外，只能读取viewModel中的值去初始化界面。</p>

<p>而交互逻辑和业务逻辑的主要交叉点出现在controller的生命周期和view组件的action操作中：</p>

<ol>
<li><p>比如说contorller的生命周期，当controller初始化并push之后，会先跳转到viewDidload中初始化subview，然后在viewWillAppear中完成布局，并向viewModel或者model层请求数据。 或者在在生命周期中需要监听某些事件通知、执行某些定时器等，这些逻辑代码就应该放到viewModel中。</p></li>
<li><p>另外对于view组件的action操作，当touch事件发生之后，既要完成view的显示或者隐藏、或重新布局、或者更新数据，又需要向viewModel层发起某些操作，这些向viewModel发起的操作逻辑也必须放到viewModel中；</p></li>
</ol>


<blockquote><p>当我们把这些业务逻辑拆分出去之后，<strong><em>如何在某些交互或者某个生命周期状态发生时自动调用对应的业务逻辑呢？业务逻辑在viewModel中又是如何组织的呢？</em></strong></p></blockquote>

<p>业务逻辑在viewModel中通过RACCommand进行管理，当调起某个command的执行之后，首先完成业务处理，并通过signal（return value）通知调用者发起回调。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>//执行添加leaveTimer
</span><span class='line'>@weakify(self);
</span><span class='line'>self.addLeaveTimerCommand = [[RACCommand alloc] initWithSignalBlock:^RACSignal *(id input) {
</span><span class='line'>    @strongify(self);
</span><span class='line'>    [self addLeaveTimer];
</span><span class='line'>    return [RACSignal return:@(YES)];
</span><span class='line'>}];
</span></code></pre></td></tr></table></div></figure>


<p>如果业务处理是异步的，则需要在viewModel中定义全局Signal（RACSubject），当异步业务处理执行完成或者错误的时候，通过RACSubject通知调用者。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>//初始化更新Signal，供view层监听
</span><span class='line'>self.refreshResultSignal = [[RACSubject subject] setNameWithFormat:@"CPArenaFottHallVM-refreshResultSignal"];
</span><span class='line'>    
</span><span class='line'>    
</span><span class='line'>/**
</span><span class='line'> * 重新刷新hallModel（hallModel其实应该是一个比较通用的ViewModel）
</span><span class='line'> */
</span><span class='line'>-(void)refreshContent
</span><span class='line'>{
</span><span class='line'>    void (^ completion)(void) = ^{
</span><span class='line'>        [self.refreshResultSignal sendCompleted];
</span><span class='line'>    };
</span><span class='line'>    
</span><span class='line'>    //通过service重新load HallModel数据
</span><span class='line'>    if(1){
</span><span class='line'>        [self.refreshResultSignal sendNext:@"hello"];
</span><span class='line'>        completion();
</span><span class='line'>    }
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>    </span></code></pre></td></tr></table></div></figure>


<p>生命周期状态的监听我们通过rac_signalforSelector去完成，某些view组件的action，则直接通过view组件的category，或者监听view组件的delegate回调来完成监听。也可以对这些信号进行组合、过滤、map、返回参数的封装，这些都是ReactiveCocoa提供的方法；</p>

<p>监听controller生命周期状态如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>//当view层disappear时，通知viewModel层开始计时
</span><span class='line'>[[self rac_signalForSelector:@selector(viewWillDisappear:)] subscribeNext:^(id x) {
</span><span class='line'>    @strongify(self);
</span><span class='line'>    [self.fhViewModel.addLeaveTimerCommand execute:nil];
</span><span class='line'>}];
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>//监控view层的显示Signal
</span><span class='line'>[[self rac_signalForSelector:@selector(viewWillAppear:)] subscribeNext:^(id x) {
</span><span class='line'>    @strongify(self);
</span><span class='line'>    [self.fhViewModel.refreshCheckCommand execute:nil];
</span><span class='line'>}];
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p>监听view组件的delegate回调如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>//监听当前HeadView的Accessory的click动作
</span><span class='line'>RACSignal *clickAccessorySignal = [self rac_signalForSelector:@selector(didClickAccessoryViewInHeaderView:) fromProtocol:@protocol(CPArenaHeaderViewDelegate)];
</span><span class='line'>[[clickAccessorySignal map:^id(RACTuple *tuple) {
</span><span class='line'>    return tuple.first;
</span><span class='line'>}] subscribeNext:^(CPArenaHeaderView *headerView) {
</span><span class='line'>  //to do something
</span><span class='line'>}
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<h3>tip:</h3>

<blockquote><ol>
<li>将某些delegate方法通过signal监听之后，其实是可以删去这些delegate方法，但是编译器报警告，所以保留原有的delegate方法，只是方法实现为空；真正的方法实现放到Signal监听之中；</li>
</ol>
</blockquote>

<h2>viewModel层和Model层之间的交互</h2>

<p>在Model层,ReactiveCocoa提供如下基础对象signal改造的支持：NSArray、NSData、NSDictionary、NSEnumerator、NSFileHandle、NSIndexSet、NSInvocation
NSNotificationCenter、NSObject、NSOrderedSet、NSSet、NSString、NSURLConnection、NSUserDefaults. 如果工程中的Model层也是通过响应式编程实现，这些category可能对Model层通知viewModel层有很大的作用，目前还没有对model层响应式编程仔细研究（这不是必要的），这里说一下Model层在MVVM模式的主要工作模式。</p>

<h3>APIService的发起路径和过程</h3>

<p>在MVC模式下，我们通常直接在controller中创建Model层提供的APIService去获取数据。而在MVVM模式中，相应APIService的请求会转移到ViewModel层，而ViewModel的初始化是根据Model层的访问完成的，其具体访问路径如下：</p>

<p>（1）当点击某个按钮或者发起初始化signal，点击动作或者创建会向viewModel发出一个signal执行RACCommand（RACCommand，执行 一次产生一个signal， 这个command在viewModel层定义和创建），当前view层会定监听RACCommand的执行，并根据返回的event实时更新view；</p>

<p>（2）viewModel接受这个signal：</p>

<ul>
<li><p>如果signal是创建ViewModel，则判断当前viewModel是否初始化，如果没有，则向Model层发起一个 initial operation；</p></li>
<li><p>如果signal改变了viewModel中的值，viewModel的变化会自动通知binding的view组件更新；此外如果viewModel的改变和Model层有关联，则向Model层发起一个update operation；</p></li>
<li><p>当前viewModel向Model发起operation之后，当前viewModel需要定制监控发起的这个signal，并将后台返回的signal信号进行处理，或更新viewModel，或向view层监控的signal发送各个operation的完成事件；</p></li>
</ul>


<p>（3）Model层不仅仅是实体对象的定义，还包括APIService的实现，APIService通过向后台发送request请求，当请求返回的时候能够根据实体定义初始化实体对象，并在Model层持有（或进一步持久化，保存为coredata或者db中）；</p>

<ul>
<li><p>当Model层接受到viewModel（MVVC）或者controller（MVC）的 initial operation时，查看Model层持有的对象，如果存在直接返回，如果不存在，则通过APIService向后台或者本地持久化发出请求，并将请求状态和结果push给ViewModel层或者controller层；</p></li>
<li><p>当Model层接收到update operation时，一般是先通过APIService发送update operation，根据operation的结果操作本地持久化对象（或者重新拉取一遍，或者直接在update operation中返回数据对原有持久对象进行更换）；</p></li>
</ul>


<h3>关于Model和网络请求的生命周期</h3>

<p>关于Model层什么时机进行初始化，Model层持有对象的生命周期，以及网络请求的生命周期？</p>

<ul>
<li>Model层的初始化，分为不同的场景，初始化的时机也不一样：</li>
</ul>


<p>(1) 如果Model是全局需要的，如UserModel，则可以在appdelegate中直接初始化；</p>

<p>(2) 如果是MVC模式，则直接在controller中直接调用APIService初始化；</p>

<p>(3) 如果是MVVM模式，则通过调用viewModel中进行初始化；</p>

<ul>
<li>生命周期：</li>
</ul>


<p>(1) 如果是全局Model，则通过单例Service进行保持；</p>

<p>(2) 如果是跟controller保持一致的，则通过普通service进行初始化；</p>

<ul>
<li>网络请求的生命周期：</li>
</ul>


<p>(1) 如果是单例的service，网络请求的生命周期肯定小于单例，service持久化的Model对象也会一直存在；</p>

<p>(2) 如果是非单例service，service持久化的Model对象随着service的dealloc而销毁， 网络请求的生命周期也会被service cancel掉；仍然小于service；</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[通用JSBridge的设计和实现]]></title>
    <link href="http://ios.devphilon.com/blog/2015/05/29/jsbridge/"/>
    <updated>2015-05-29T21:30:27+08:00</updated>
    <id>http://ios.devphilon.com/blog/2015/05/29/jsbridge</id>
    <content type="html"><![CDATA[<h3>前言</h3>

<p>对于商务类的app，随着app注册使用人数递增，app的运营者们就会逐渐考虑在应用中开展一些推广活动。大多数活动具备时效性强、运营时间短的特征，一般产品们和运营者们都是通过wap页面快速投放到产品的活动模块。Wap页面可以声文并茂地介绍活动，但活动的最终目标是通过获取特权、跳转进入本地功能模块，最后达成交易。如何建立wap页面和本地Native页面的深度交互，这就需要用到本文介绍的JSBridge。</p>

<p>此外一些平台类的产品，如大家每天都在使用的微信、支付宝、手机qq等，无一例外都在使用集成JSBridge的webContainer完成众多业务组件功能，大大减少了客户端Native开发的工作量，不仅节约了大量人力开发成本，还能避开产品上线更新的版本审核周期限制（特别是IOS平台）。当然这些超级APP有强大的技术力量支撑，通过JSBridge有计划的进行API规范接口，不断向前端Wap开发人员开放，并在版本上向下兼容。但对于我们刚起步运营的中小级app来说暂时还没有必要如此大张旗鼓，相反前面提到的wap活动推广则是我们的主要需求。</p>

<p>为了满足这个需求，本文通过提炼JSBridge的核心部分改造成JSService方式供各个不同的产品零修改方式使用。各个不同的产品只需要按照插件的方式提供Native扩展接口，并在各自封装的webContainer中调用JSService对Wap调用进行拦截处理。</p>

<h3>具体产品应用</h3>

<p>目前该框架同时覆盖了Android和IOS平台，在我司的几个电商类产品中都得到了很好的使用，并趋于稳定。
本文的Demo工程运行效果如下：</p>

<p><img src="http://ios.devphilon.com/images/jsapidemo_ios.png">
<img src="http://ios.devphilon.com/images/jsapidemo_android.jpg"></p>

<h3>关于JSAPI的接口封装</h3>

<p>JSAPI的封装包括核心JS和对外开放接口JS两个部分。 核心JS部分通过拦截某Q的wap请求页面获取，获取的JS进行编码混淆处理，已经通过调试进行了注释，其主要过程就是对参数和回调进行封装，并构建一个url链接通过创建一个隐藏的iframe进行发送。<a href="">核心JS代码阅读</a></p>

<p>对参数和回调进行封装部分的代码如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>//invoke
</span><span class='line'>  //mapp.invoke("device", "getDeviceInfo", e);
</span><span class='line'>  //@param e 类 必须
</span><span class='line'>  //@param n 类方法 必须
</span><span class='line'>  //@param i 同步回调的js方法
</span><span class='line'>  //@param s 
</span><span class='line'>    function k(e, n, i, s) {
</span><span class='line'>        if (!e || !n) return null;
</span><span class='line'>        var o, u;
</span><span class='line'>        i = r.call(arguments, 2), //相当于调用Array.prototype.slice(arguments) == arguments.slice(2),获取argument数组2以后的元素
</span><span class='line'>        
</span><span class='line'>      //令s等于回调函数
</span><span class='line'>      s = i.length && i[i.length - 1],
</span><span class='line'>        s && typeof s == "function" ? i.pop() : typeof s == "undefined" ? i.pop() : s = null,
</span><span class='line'>        
</span><span class='line'>      //u为当前存储回调函数的index；
</span><span class='line'>      u = b(s);
</span><span class='line'>        
</span><span class='line'>      //如果当前版本支持Bridge
</span><span class='line'>      if (C(e, n)) {
</span><span class='line'>          //将传进来的所有参数生成一个url字符串；
</span><span class='line'>            o = "ldjsbridge:" + "/" + "/" + encodeURIComponent(e) + "/" + encodeURIComponent(n),
</span><span class='line'>            i.forEach(function(e, t) {
</span><span class='line'>                typeof e == "object" && (e = JSON.stringify(e)),
</span><span class='line'>                t === 0 ? o += "?p=": o += "&p" + t + "=",
</span><span class='line'>                o += encodeURIComponent(String(e))
</span><span class='line'>            }),
</span><span class='line'>            (o += "#" + u); //带上存储回调的数组index;
</span><span class='line'>          
</span><span class='line'>           
</span><span class='line'>          //执行生成的url, 有些函数是同步执行完毕，直接调用回调函数；而有些函数的调用要通过异步调用执行，需要通过
</span><span class='line'>          //全局调用去完成；
</span><span class='line'>              var f = N(o);
</span><span class='line'>            if (t.iOS) {
</span><span class='line'>                f = f ? f.result: null;
</span><span class='line'>                if (!s) return f; //如果无回调函数，直接返回结果；
</span><span class='line'>            }
</span><span class='line'>        }else {
</span><span class='line'>          console.log("mappapi: the version don't support mapp." + e + "." + n);
</span><span class='line'>      }
</span><span class='line'>    }
</span></code></pre></td></tr></table></div></figure>


<p>创建iframe发送JSBridge调用请求：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>//创建一个iframe，执行src，供拦截
</span><span class='line'>function N(n, r) {
</span><span class='line'>  console.log("logOpenURL:&gt;&gt;" + n);
</span><span class='line'>    var i = document.createElement("iframe");
</span><span class='line'>    i.style.cssText = "display:none;width:0px;height:0px;";
</span><span class='line'>    var s = function() {
</span><span class='line'>      //通过全局执行函数执行回调函数；监听iframe是否加载完毕
</span><span class='line'>        E(r, {
</span><span class='line'>            r: -201,
</span><span class='line'>            result: "error"
</span><span class='line'>        })
</span><span class='line'>    };
</span><span class='line'>    
</span><span class='line'>  //ios平台，令iframe的src为url，onload函数为全局回调函数
</span><span class='line'>  //并将iframe插入到body或者html的子节点中；
</span><span class='line'>  t.iOS && (i.onload = s, i.src = n);
</span><span class='line'>    var o = document.body || document.documentElement; 
</span><span class='line'>    o.appendChild(i),
</span><span class='line'>    t.android && (i.onload = s, i.src = n);
</span><span class='line'>  
</span><span class='line'>  //
</span><span class='line'>    var u = t.__RETURN_VALUE;
</span><span class='line'>  //当iframe执行完成之后，最后执行settimeout 0语句
</span><span class='line'>    return t.__RETURN_VALUE = e,
</span><span class='line'>    setTimeout(function() {
</span><span class='line'>        i.parentNode.removeChild(i)
</span><span class='line'>    },
</span><span class='line'>    0),
</span><span class='line'>    u
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>对外开放接口的封装：（使用者只需要对该部分进行接口扩展即可）</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mapp.build("mapp.device.getDeviceInfo", {
</span><span class='line'>    iOS: function(e) {
</span><span class='line'>      return mapp.invoke("device", "getDeviceInfo", e);
</span><span class='line'>    },
</span><span class='line'>    android: function(e) {
</span><span class='line'>      var t = e;
</span><span class='line'>      e = function(e) {
</span><span class='line'>          try {
</span><span class='line'>              e = JSON.parse(e)
</span><span class='line'>          } catch(n) {}
</span><span class='line'>          t && t(e)
</span><span class='line'>      },
</span><span class='line'>      mapp.invoke("device", "getDeviceInfo", e)
</span><span class='line'>    },
</span><span class='line'>    support: {
</span><span class='line'>        iOS: "1.0",
</span><span class='line'>        android: "1.0"
</span><span class='line'>    }
</span><span class='line'>}),
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<h4>核心JS代码调用说明</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>mapp.version: mappAPI自身版本号
</span><span class='line'>
</span><span class='line'>mapp.iOS: 如果在ios app中，值为true
</span><span class='line'>
</span><span class='line'>mapp.android: 如果在android app中，值为true
</span><span class='line'>
</span><span class='line'>mapp.support: 检查当前app环境是否支持该接口，支持返回true
</span><span class='line'>
</span><span class='line'>  mapp.support("mqq.device.getClientInfo")
</span><span class='line'>
</span><span class='line'>mapp.callback: 用于生成回调名字，跟着invoke参数传给客户端，供客户端回调
</span><span class='line'>
</span><span class='line'>  var callbackName = mapp.callback(function(type, index){     console.log("type: " + type + ", index: " + index);    });
</span><span class='line'>
</span><span class='line'>mapp.invoke 方法:
</span><span class='line'>
</span><span class='line'>mapp核心方法，用于调用客户端接口。
</span><span class='line'>
</span><span class='line'>      @param {String} namespace 命名空间
</span><span class='line'>      @param {String} method 接口名字
</span><span class='line'>      @param {Object/String} params 可选，API调用的参数
</span><span class='line'>      @param {Function} callback 可选，API调用的回调
</span><span class='line'>
</span><span class='line'>* 调用普通的无参数接口：
</span><span class='line'>
</span><span class='line'>      mapp.invoke("ns", "method");
</span><span class='line'>      
</span><span class='line'>* 调用有异步回调函数的接口：
</span><span class='line'>
</span><span class='line'>      mapp.invoke("ns", "method", function(data){
</span><span class='line'>          console.log(data);
</span><span class='line'>      });
</span><span class='line'>      
</span><span class='line'>      或
</span><span class='line'>      
</span><span class='line'>      mapp.invoke("ns", "method", {
</span><span class='line'>          "params" : params   //参数通过json封装
</span><span class='line'>          "callback" : mapp.callback(handler), //生成回调名字
</span><span class='line'>      });
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>* 如果有多个参数调用：
</span><span class='line'>
</span><span class='line'>      mapp.invoke("ns", "method", param1, param2 /*,...*/,callback);
</span><span class='line'>      
</span><span class='line'>      </span></code></pre></td></tr></table></div></figure>


<h3>JSService的具体实现－插件运行机制</h3>

<p>JSService部分是基于Phonegap的Cordova引擎的基础上简化而来，其基本原理参照Cordova的引擎原理如图所示：</p>

<p><img src="http://ios.devphilon.com/images/JSBridgeIOS_1.png"></p>

<p>一般app中都有自己定制的Webcontainer，为了更好的跟已有项目相融合，在Cordova的基础上我们进行了简化，通过JSAPIService服务的方式进行插件扩展开发如图所示：</p>

<p><img src="http://ios.devphilon.com/images/JSBridgeIOS_2.png"></p>

<p>本JSBridge是基于Phonegap的Cordova引擎的基础上简化而来, Android平台Webview和JS的交互方式共有三种:</p>

<ol>
<li>ExposedJsApi：js直接调用java对象的方法；（同步）</li>
<li>重载chromeClient的prompt 截获方案；(异步)</li>
<li>url截获+webview.loadUrl回调的方案；（异步）</li>
</ol>


<p>为了和IOS保持一致的JSAPI，只能选用第三套方案；</p>

<p><a href="">具体实现参考源码</a></p>

<h3>基于JSService的插件开发、配置和使用</h3>

<h4>IOS平台</h4>

<p>在Native部分，定义一个模块插件对应于创建一个插件类, 模块中的每个插件接口对应插件类中某个方法。
集成LDJSBridge_IOS框架之后，只需要继承框架中的插件基类LDJSPlugin，如下所示：</p>

<ul>
<li>插件接口定义</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#import "LDJSPlugin.h"
</span><span class='line'>@interface LDPDevice : LDJSPlugin
</span><span class='line'>{}
</span><span class='line'>
</span><span class='line'>//@func 获取设备信息
</span><span class='line'>- (void)getDeviceInfo:(LDJSInvokedUrlCommand*)command;
</span><span class='line'>
</span><span class='line'>@end
</span></code></pre></td></tr></table></div></figure>


<p></p>

<ul>
<li>自定义插件接口实现</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@implementation LDPDevice
</span><span class='line'>
</span><span class='line'>/**
</span><span class='line'> *@func 获取设备信息
</span><span class='line'> */
</span><span class='line'>- (void)getDeviceInfo:(LDJSInvokedUrlCommand*)command{
</span><span class='line'>    //读取设备信息
</span><span class='line'>    NSMutableDictionary* deviceProperties = [NSMutableDictionary dictionaryWithCapacity:4];
</span><span class='line'>    
</span><span class='line'>    UIDevice* device = [UIDevice currentDevice];
</span><span class='line'>    [deviceProperties setObject:[device systemName] forKey:@"systemName"];
</span><span class='line'>    [deviceProperties setObject:[device systemVersion] forKey:@"systemVersion"];
</span><span class='line'>    [deviceProperties setObject:[device model] forKey:@"model"];
</span><span class='line'>    [deviceProperties setObject:[device modelVersion] forKey:@"modelVersion"];
</span><span class='line'>    [deviceProperties setObject:[self uniqueAppInstanceIdentifier] forKey:@"identifier"];
</span><span class='line'>    
</span><span class='line'>    LDJSPluginResult* pluginResult = [LDJSPluginResult resultWithStatus:LDJSCommandStatus_OK messageAsDictionary:[NSDictionary dictionaryWithDictionary:deviceProperties]];
</span><span class='line'>    
</span><span class='line'>    [self.commandDelegate sendPluginResult:pluginResult callbackId:command.callbackId];
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>@end</span></code></pre></td></tr></table></div></figure>


<ul>
<li>在plugin.json文件中对plugin插件的统一配置</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>    "update": "",
</span><span class='line'>    "module": "mapp",
</span><span class='line'>    "plugins": [
</span><span class='line'>        {
</span><span class='line'>            "pluginname": "device",
</span><span class='line'>            "pluginclass": "LDPDevice",
</span><span class='line'>            "exports": [
</span><span class='line'>                {
</span><span class='line'>                    "showmethod": "getDeviceInfo",
</span><span class='line'>                    "realmethod": "getDeviceInfo"
</span><span class='line'>                }
</span><span class='line'>            ]
</span><span class='line'>        }
</span><span class='line'>  ]
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<ul>
<li>在webContainer中对JSService初始化, 当初始化完成之后，向前端页面发送一个ReadyEvent，前端即可开始调用JSAPI接口；</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>//注册插件Service
</span><span class='line'>    if(_bridgeService == nil){
</span><span class='line'>        _bridgeService = [[LDJSService alloc] initBridgeServiceWithConfig:@"PluginConfig.json"];
</span><span class='line'>    }
</span><span class='line'>    [_bridgeService connect:_webview Controller:self];
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>/**
</span><span class='line'> Called when the webview finishes loading.  This stops the activity view.
</span><span class='line'> */
</span><span class='line'>- (void)webViewDidFinishLoad:(UIWebView*)theWebView{
</span><span class='line'>    NSLog(@"Finished load of: %@", theWebView.request.URL);
</span><span class='line'>    //当webview finish load之后，发event事件通知前端JSBridgeService已经就绪
</span><span class='line'>    //监听事件由各个产品自行决定
</span><span class='line'>    [_bridgeService readyWithEvent:@"LDJSBridgeServiceReady"];
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<h4>Android平台</h4>

<ul>
<li>插件接口定义</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public class LDPDevice extends LDJSPlugin {
</span><span class='line'>          public static final String TAG = "Device";
</span><span class='line'>
</span><span class='line'>  /**
</span><span class='line'>           * Constructor.
</span><span class='line'>           */
</span><span class='line'>          public LDPDevice() {
</span><span class='line'>          }
</span><span class='line'>      }
</span><span class='line'>      </span></code></pre></td></tr></table></div></figure>


<ul>
<li>LDJSPlugin 属性方法说明</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/**
</span><span class='line'>* Plugins must extend this class and override one of the execute methods.
</span><span class='line'>*/
</span><span class='line'>public class LDJSPlugin {
</span><span class='line'>          public String id;
</span><span class='line'>          
</span><span class='line'>          //在插件初始化的时候，会初始化当前插件所属的webview和controller
</span><span class='line'>  //供插件方法接口 返回处理结果
</span><span class='line'>    public WebView webView; 
</span><span class='line'>  public LDJSActivityInterface activityInterface;
</span><span class='line'>  
</span><span class='line'>  //所有自定义插件需要重载此方法
</span><span class='line'>  public boolean execute(String action, LDJSParams args, LDJSCallbackContext callbackContext) throws JSONException {
</span><span class='line'>          return false;
</span><span class='line'>          }
</span><span class='line'>          
</span><span class='line'>      }   
</span><span class='line'>      </span></code></pre></td></tr></table></div></figure>


<ul>
<li>自定义插件接口实现</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@Override
</span><span class='line'>  public boolean execute(String action, LDJSParams args, LDJSCallbackContext callbackContext) throws JSONException {
</span><span class='line'>      if (action.equals("getDeviceInfo")) {
</span><span class='line'>          JSONObject r = new JSONObject();
</span><span class='line'>          r.put("uuid", LDPDevice.uuid);
</span><span class='line'>          r.put("version", this.getOSVersion());
</span><span class='line'>          r.put("platform", this.getPlatform());
</span><span class='line'>          r.put("model", this.getModel());
</span><span class='line'>          callbackContext.success(r);
</span><span class='line'>      }
</span><span class='line'>      else {
</span><span class='line'>          return false;
</span><span class='line'>      }
</span><span class='line'>      return true;
</span><span class='line'>  }
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>在封装的webContainer中注册服务并调用：</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  /**
</span><span class='line'>     * 初始化Activity,打开网页，注册插件服务
</span><span class='line'>     */
</span><span class='line'>    public void initActivity() {
</span><span class='line'>        //创建webview和显示view
</span><span class='line'>      createGapView();
</span><span class='line'>      createViews();
</span><span class='line'>
</span><span class='line'>      //注册插件服务
</span><span class='line'>      if(jsBridgeService == null){
</span><span class='line'>          jsBridgeService = new LDJSService(_webview, this, "PluginConfig.json");
</span><span class='line'>      }
</span><span class='line'>
</span><span class='line'>      //加载请求
</span><span class='line'>      if(this.url != null && !this.url.equalsIgnoreCase("")){
</span><span class='line'>          _webview.loadUrl(this.url);
</span><span class='line'>      }
</span><span class='line'>    }
</span><span class='line'>    
</span><span class='line'>    
</span><span class='line'>    
</span><span class='line'> /**
</span><span class='line'>     * 初始化webview，如果需要调用JSAPI，必须为Webview注册WebViewClient和WebChromeClient
</span><span class='line'>     */
</span><span class='line'>    @SuppressLint("SetJavaScriptEnabled")
</span><span class='line'>    public void createGapView(){
</span><span class='line'>      if(_webview == null){
</span><span class='line'>          _webview = new WebView(LDPBaseWebViewActivity.this, null);
</span><span class='line'>          //设置允许webview和javascript交互
</span><span class='line'>            _webview.getSettings().setJavaScriptEnabled(true);
</span><span class='line'>            _webview.getSettings().setCacheMode(WebSettings.LOAD_NO_CACHE);
</span><span class='line'>
</span><span class='line'>          //绑定webviewclient
</span><span class='line'>          _webviewClient = new WebViewClient(){
</span><span class='line'>              public void onPageStarted(WebView view, String url, Bitmap favicon){
</span><span class='line'>                  super.onPageStarted(view, url, favicon);
</span><span class='line'>                  isWebviewStarted = true;
</span><span class='line'>              }
</span><span class='line'>
</span><span class='line'>              public void onPageFinished(WebView view, String url) {
</span><span class='line'>                  super.onPageFinished(view, url);
</span><span class='line'>                      //发送事件通知前端
</span><span class='line'>                  if(isWebviewStarted){
</span><span class='line'>                      //在page加载之后，加载核心JS，前端页面可以在document.ready函数中直接调用了；
</span><span class='line'>                      jsBridgeService.onWebPageFinished();
</span><span class='line'>                          jsBridgeService.readyWithEventName("LDJSBridgeServiceReady");
</span><span class='line'>                  }
</span><span class='line'>                  isWebviewStarted = false;
</span><span class='line'>              }
</span><span class='line'>
</span><span class='line'>                @Override
</span><span class='line'>                public boolean shouldOverrideUrlLoading(WebView view, String url) {
</span><span class='line'>                      if(url.startsWith("about:")){
</span><span class='line'>                          return true;
</span><span class='line'>                      }
</span><span class='line'>                      if(url.startsWith(LDJSService.LDJSBridgeScheme)){
</span><span class='line'>                          //处理JSBridge特定的Scheme
</span><span class='line'>                          jsBridgeService.handleURLFromWebview(url);
</span><span class='line'>                          return true;
</span><span class='line'>                      }
</span><span class='line'>
</span><span class='line'>                      return false;
</span><span class='line'>                }
</span><span class='line'>          };
</span><span class='line'>
</span><span class='line'>          _webview.setWebViewClient(_webviewClient);
</span><span class='line'>          //绑定chromeClient
</span><span class='line'>          _webviewChromeClient = new WebChromeClient(){
</span><span class='line'>              @Override
</span><span class='line'>              public boolean onJsAlert(WebView view, String url, String message,
</span><span class='line'>                      JsResult result) {
</span><span class='line'>                  return super.onJsAlert(view, url, message, result);
</span><span class='line'>              }
</span><span class='line'>          };
</span><span class='line'>          _webview.setWebChromeClient(_webviewChromeClient);
</span><span class='line'>      }
</span><span class='line'>    }
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<h3>结束</h3>

<p>第一次写博客，写得糙和不好的地方望见谅，本人将会不断改善和提高自身能力；目前源码部分还没有得到许可上传到Github部分（待得到许可，应该问题不大，一定第一时间上传），所以本博客主要提供大概的解决方案，望能够和有需要的人士交流沟通具体实现方式的差异。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何搭建自己的github博客，我从这里启航]]></title>
    <link href="http://ios.devphilon.com/blog/2015/05/22/helloworld/"/>
    <updated>2015-05-22T10:25:23+08:00</updated>
    <id>http://ios.devphilon.com/blog/2015/05/22/helloworld</id>
    <content type="html"><![CDATA[<p>来某易公司差不多三个季度了，比起刚入职时候的期待、兴奋、专注，现在是期待和兴奋已被磨灭殆尽，在技术方面也越来越不专注了。越是闲下来，越不想时光在这样的停摆期悄悄溜走，特别想让自己仍然在IOS和前端领域深耕细作。 折腾了两天，终于把自己的独立博客在github搭建起来了，以后希望能够在此和大家分享当前前端前沿技术的学习和实践，也希望能够在IOS的深入学习上能够一点一滴的由浅入深，</p>
]]></content>
  </entry>
  
</feed>
